// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: test.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TesterClient is the client API for Tester service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TesterClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GetError(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SayHello(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Hello, error)
}

type testerClient struct {
	cc grpc.ClientConnInterface
}

func NewTesterClient(cc grpc.ClientConnInterface) TesterClient {
	return &testerClient{cc}
}

func (c *testerClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/test.Tester/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) GetError(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/test.Tester/GetError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testerClient) SayHello(ctx context.Context, in *Name, opts ...grpc.CallOption) (*Hello, error) {
	out := new(Hello)
	err := c.cc.Invoke(ctx, "/test.Tester/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TesterServer is the server API for Tester service.
// All implementations must embed UnimplementedTesterServer
// for forward compatibility
type TesterServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	GetError(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SayHello(context.Context, *Name) (*Hello, error)
	mustEmbedUnimplementedTesterServer()
}

// UnimplementedTesterServer must be embedded to have forward compatible implementations.
type UnimplementedTesterServer struct {
}

func (UnimplementedTesterServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTesterServer) GetError(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetError not implemented")
}
func (UnimplementedTesterServer) SayHello(context.Context, *Name) (*Hello, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedTesterServer) mustEmbedUnimplementedTesterServer() {}

// UnsafeTesterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TesterServer will
// result in compilation errors.
type UnsafeTesterServer interface {
	mustEmbedUnimplementedTesterServer()
}

func RegisterTesterServer(s grpc.ServiceRegistrar, srv TesterServer) {
	s.RegisterService(&Tester_ServiceDesc, srv)
}

func _Tester_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Tester/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_GetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).GetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Tester/GetError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).GetError(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tester_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TesterServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.Tester/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TesterServer).SayHello(ctx, req.(*Name))
	}
	return interceptor(ctx, in, info, handler)
}

// Tester_ServiceDesc is the grpc.ServiceDesc for Tester service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tester_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Tester",
	HandlerType: (*TesterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Tester_Add_Handler,
		},
		{
			MethodName: "GetError",
			Handler:    _Tester_GetError_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Tester_SayHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
